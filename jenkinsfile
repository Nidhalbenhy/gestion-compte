pipeline {
    agent any
    environment {
        DOCKER_IMAGE_NAME = 'nidhal12345/docker-hub-gestion-compte'  // Change selon ton nom d'image Docker
        DOCKERHUB_CREDENTIALS = 'dockerhub-credentials'  // Référence les identifiants DockerHub dans Jenkins
        DOCKER_REGISTRY = 'https://registry.hub.docker.com'
        DOCKER_TAG = 'latest'
        GIT_REPO = 'https://github.com/Nidhalbenhy/gestion-compte'  // Change le lien de ton repo GitHub
        JAVA_OPTS = '-Dorg.jenkinsci.plugins.durabletask.BourneShellScript.LAUNCH_DIAGNOSTICS=true'  // Pour plus de logs
        PATH = "/usr/local/bin:$PATH"  // Ajoute un chemin explicite pour Docker
    }

    stages {

        stage('Check Docker') {
            steps {
                script {
                    // Ajoute un diagnostic pour vérifier si Docker est installé et accessible
                    echo "Checking Docker installation..."
                    sh 'which docker'  // Vérifie le chemin de Docker
                    sh 'docker --version'  // Affiche la version de Docker
                }
            }
        }

        stage('Checkout') {
            steps {
                git branch: 'master', url: "${GIT_REPO}"  // Clone ton repo Git
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    // Construire l'image Docker
                    echo "Building Docker image..."
                    sh 'docker build -t ${DOCKER_IMAGE_NAME}:${DOCKER_TAG} .'
                }
            }
        }

        stage('Login to DockerHub') {
            steps {
                script {
                    // Connecte-toi à DockerHub avec les credentials Jenkins
                    echo "Logging in to DockerHub..."
                    docker.withRegistry(DOCKER_REGISTRY, DOCKERHUB_CREDENTIALS) {
                        sh 'docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD'
                    }
                }
            }
        }

        stage('Push to DockerHub') {
            steps {
                script {
                    // Pousse l'image Docker vers DockerHub
                    echo "Pushing Docker image to DockerHub..."
                    docker.withRegistry(DOCKER_REGISTRY, DOCKERHUB_CREDENTIALS) {
                        sh 'docker push ${DOCKER_IMAGE_NAME}:${DOCKER_TAG}'
                    }
                }
            }
        }

        stage('Deploy on Load Balancer') {
            steps {
                script {
                    // Exemple Deploy avec Kubernetes
                    echo "Deploying on Load Balancer..."
                    sh 'kubectl apply -f springboot-deployment.yaml'
                    sh 'kubectl apply -f springboot-service.yaml'
                }
            }
        }
    }

    post {
        always {
            echo "Cleaning workspace..."
            cleanWs()  // Nettoyer l'espace de travail Jenkins après chaque exécution
        }
    }
}